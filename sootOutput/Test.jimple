public class Test extends java.lang.Object
{
/*Test.java*/

/*0*/
    public void <init>()
    {
        Test this;

        this := @this: Test;
/*1*/
        specialinvoke this.<java.lang.Object: void <init>()>();
/*1*/
        return;
/*1*/
    }

/*3*/
    public int simpleNumericTest(int)
    {
        Test this;
        int n, x, $i0;

        this := @this: Test;
/*4*/
        n := @parameter0: int;
/*4*/
        staticinvoke <Logger: void init(java.lang.String,boolean,boolean)>("simpleNumericTest", 1, 1);
        x = n;
/*4*/
/*4*/
        staticinvoke <Logger: void addToSpec(java.lang.String)>("[");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(n, "#LOCAL#_n");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        staticinvoke <Logger: void logCmd(java.lang.String)>("x = n");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(n, "#LOCAL#_n");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(x, "#LOCAL#_x");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        x = x + 1;
/*5*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("x = x + 1");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(n, "#LOCAL#_n");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(x, "#LOCAL#_x");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        x = x / 3;
/*6*/
/*6*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("x = x / 3");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(n, "#LOCAL#_n");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(x, "#LOCAL#_x");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        $i0 = n + x;
/*7*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("$i0 = n + x");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(n, "#LOCAL#_n");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(x, "#LOCAL#_x");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        staticinvoke <Logger: void dumpSpecToFile(java.lang.String)>("Test_Result");
        return $i0;
/*7*/
    }

/*10*/
    public int gcd(int, int)
    {
        Test this;
        int a, b;

        this := @this: Test;
/*11*/
        a := @parameter0: int;
/*11*/
        b := @parameter1: int;
/*11*/

     label0:
        staticinvoke <Logger: void init(java.lang.String,boolean,boolean)>("gcd", 1, 1);
        if a == b goto label2;
/*11*/

        staticinvoke <Logger: void addToSpec(java.lang.String)>("[");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(a, "#LOCAL#_a");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(b, "#LOCAL#_b");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        if a <= b goto label1;
/*12*/

        a = a - b;
/*13*/
/*13*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("a = a - b");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(a, "#LOCAL#_a");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(b, "#LOCAL#_b");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        goto label0;
/*13*/

        staticinvoke <Logger: void logCmd(java.lang.String)>("goto [?= (branch)]");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(a, "#LOCAL#_a");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(b, "#LOCAL#_b");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");

     label1:
        b = b - a;
/*15*/
/*15*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("b = b - a");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(a, "#LOCAL#_a");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(b, "#LOCAL#_b");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        goto label0;
/*15*/

        staticinvoke <Logger: void logCmd(java.lang.String)>("goto [?= (branch)]");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(a, "#LOCAL#_a");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(b, "#LOCAL#_b");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");

     label2:
        staticinvoke <Logger: void dumpSpecToFile(java.lang.String)>("Test_Result");
        return a;
/*17*/
    }

/*20*/
    public int factorial(int)
    {
        Test this;
        int x, y;

        this := @this: Test;
/*21*/
        x := @parameter0: int;
/*21*/
        staticinvoke <Logger: void init(java.lang.String,boolean,boolean)>("factorial", 1, 1);
        y = 1;
/*21*/
/*21*/
        staticinvoke <Logger: void addToSpec(java.lang.String)>("[");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(x, "#LOCAL#_x");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        staticinvoke <Logger: void logCmd(java.lang.String)>("y = 1");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(x, "#LOCAL#_x");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(y, "#LOCAL#_y");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");

     label0:
        if x == 1 goto label1;
/*22*/

        y = y * x;
/*23*/
/*23*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("y = y * x");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(x, "#LOCAL#_x");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(y, "#LOCAL#_y");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        x = x - 1;
/*24*/
/*24*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("x = x - 1");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(x, "#LOCAL#_x");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(y, "#LOCAL#_y");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        goto label0;
/*24*/

        staticinvoke <Logger: void logCmd(java.lang.String)>("goto [?= (branch)]");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(x, "#LOCAL#_x");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(y, "#LOCAL#_y");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");

     label1:
        staticinvoke <Logger: void dumpSpecToFile(java.lang.String)>("Test_Result");
        return y;
/*26*/
    }

/*29*/
    public void simpleSLL(SLLNode, SLLNode, SLLNode)
    {
        Test this;
        SLLNode head, temp, anotherTemp;

        this := @this: Test;
/*30*/
        head := @parameter0: SLLNode;
/*30*/
        temp := @parameter1: SLLNode;
/*30*/
        anotherTemp := @parameter2: SLLNode;
/*30*/
        staticinvoke <Logger: void init(java.lang.String,boolean,boolean)>("simpleSLL", 1, 1);
        head.<SLLNode: int data> = 3;
/*30*/
        staticinvoke <Logger: void addToSpec(java.lang.String)>("[");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(temp, "#LOCAL#_temp");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(anotherTemp, "#LOCAL#_anotherTemp");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        staticinvoke <Logger: void logCmd(java.lang.String)>("head.<SLLNode: int data> = 3");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(temp, "#LOCAL#_temp");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(anotherTemp, "#LOCAL#_anotherTemp");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        head.<SLLNode: SLLNode next> = temp;
/*31*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("head.<SLLNode: SLLNode next> = temp");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(temp, "#LOCAL#_temp");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(anotherTemp, "#LOCAL#_anotherTemp");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        head.<SLLNode: int data> = 9;
/*32*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("head.<SLLNode: int data> = 9");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(temp, "#LOCAL#_temp");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(anotherTemp, "#LOCAL#_anotherTemp");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        anotherTemp.<SLLNode: int data> = 5;
/*33*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("anotherTemp.<SLLNode: int data> = 5");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(temp, "#LOCAL#_temp");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(anotherTemp, "#LOCAL#_anotherTemp");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        staticinvoke <Logger: void dumpSpecToFile(java.lang.String)>("Test_Result");
        return;
/*34*/
    }

/*36*/
    public int findMax(SLLNode)
    {
        Test this;
        SLLNode head, t;
        int max, $i0;

        this := @this: Test;
/*37*/
        head := @parameter0: SLLNode;
/*37*/
        staticinvoke <Logger: void init(java.lang.String,boolean,boolean)>("findMax", 1, 1);
        t = head;
/*37*/
/*37*/
        staticinvoke <Logger: void addToSpec(java.lang.String)>("[");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        staticinvoke <Logger: void logCmd(java.lang.String)>("t = head");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(t, "#LOCAL#_t");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        max = head.<SLLNode: int data>;
/*38*/
/*38*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("max = head.<SLLNode: int data>");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(t, "#LOCAL#_t");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(max, "#LOCAL#_max");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");

     label0:
        if t == null goto label2;
/*39*/

        $i0 = t.<SLLNode: int data>;
/*40*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("$i0 = t.<SLLNode: int data>");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(t, "#LOCAL#_t");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(max, "#LOCAL#_max");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        if $i0 <= max goto label1;
/*40*/

        max = t.<SLLNode: int data>;
/*41*/
/*41*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("max = t.<SLLNode: int data>");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(t, "#LOCAL#_t");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(max, "#LOCAL#_max");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");

     label1:
        t = t.<SLLNode: SLLNode next>;
/*42*/
/*42*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("t = t.<SLLNode: SLLNode next>");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(t, "#LOCAL#_t");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(max, "#LOCAL#_max");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        goto label0;
/*42*/

        staticinvoke <Logger: void logCmd(java.lang.String)>("goto [?= (branch)]");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(t, "#LOCAL#_t");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(max, "#LOCAL#_max");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");

     label2:
        staticinvoke <Logger: void dumpSpecToFile(java.lang.String)>("Test_Result");
        return max;
/*44*/
    }

/*49*/
    public SLLNode reverse(SLLNode)
    {
        Test this;
        SLLNode head, result, t;

        this := @this: Test;
/*50*/
        head := @parameter0: SLLNode;
/*50*/
        staticinvoke <Logger: void init(java.lang.String,boolean,boolean)>("reverse", 1, 1);
        result = null;
/*50*/
/*50*/
        staticinvoke <Logger: void addToSpec(java.lang.String)>("[");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        staticinvoke <Logger: void logCmd(java.lang.String)>("result = null");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(result, "#LOCAL#_result");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");

     label0:
        if head == null goto label1;
/*51*/

        t = head.<SLLNode: SLLNode next>;
/*52*/
/*52*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("t = head.<SLLNode: SLLNode next>");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(result, "#LOCAL#_result");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(t, "#LOCAL#_t");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        head.<SLLNode: SLLNode next> = result;
/*53*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("head.<SLLNode: SLLNode next> = result");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(result, "#LOCAL#_result");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(t, "#LOCAL#_t");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        result = head;
/*54*/
/*54*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("result = head");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(result, "#LOCAL#_result");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(t, "#LOCAL#_t");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        head = t;
/*55*/
/*55*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("head = t");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(result, "#LOCAL#_result");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(t, "#LOCAL#_t");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        goto label0;
/*55*/

        staticinvoke <Logger: void logCmd(java.lang.String)>("goto [?= (branch)]");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(result, "#LOCAL#_result");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(t, "#LOCAL#_t");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");

     label1:
        staticinvoke <Logger: void dumpSpecToFile(java.lang.String)>("Test_Result");
        return result;
/*57*/
    }

/*60*/
    public static void main(java.lang.String[])
    {
        java.lang.String[] args;
        Test $r0, test;
        SLLNode head, temp, anotherTemp, $r1;

        args := @parameter0: java.lang.String[];
/*61*/
        $r0 = new Test;
/*61*/
        specialinvoke $r0.<Test: void <init>()>();
/*61*/
        test = $r0;
/*61*/
        virtualinvoke test.<Test: int simpleNumericTest(int)>(2);
/*64*/
        virtualinvoke test.<Test: int factorial(int)>(5);
/*65*/
        virtualinvoke test.<Test: int gcd(int,int)>(3, 54);
/*66*/
        $r1 = new SLLNode;
/*69*/
        specialinvoke $r1.<SLLNode: void <init>(int,SLLNode)>(2, null);
/*69*/
        head = $r1;
/*69*/
        $r1 = new SLLNode;
/*70*/
        specialinvoke $r1.<SLLNode: void <init>(int,SLLNode)>(1, null);
/*70*/
        temp = $r1;
/*70*/
        $r1 = new SLLNode;
/*71*/
        specialinvoke $r1.<SLLNode: void <init>(int,SLLNode)>(1, null);
/*71*/
        anotherTemp = $r1;
/*71*/
        virtualinvoke test.<Test: void simpleSLL(SLLNode,SLLNode,SLLNode)>(head, temp, anotherTemp);
/*72*/
        virtualinvoke test.<Test: int findMax(SLLNode)>(head);
/*73*/
        virtualinvoke test.<Test: SLLNode reverse(SLLNode)>(head);
/*74*/
        return;
/*75*/
    }
}
