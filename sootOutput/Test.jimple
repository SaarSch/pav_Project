public class Test extends java.lang.Object
{
/*Test.java*/

/*0*/
    public void <init>()
    {
        Test this;

        this := @this: Test;
/*1*/
        specialinvoke this.<java.lang.Object: void <init>()>();
/*1*/
        return;
/*1*/
    }

/*3*/
    public void exemple_2(SLLNode, SLLNode, SLLNode)
    {
        Test this;
        SLLNode head, temp, anotherTemp;

        this := @this: Test;
/*4*/
        head := @parameter0: SLLNode;
/*4*/
        temp := @parameter1: SLLNode;
/*4*/
        anotherTemp := @parameter2: SLLNode;
/*4*/
        staticinvoke <Logger: void init(java.lang.String)>("exemple_2");
        head.<SLLNode: int data> = 3;
/*4*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("head.<SLLNode: int data> = 3");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(anotherTemp, "#LOCAL#_anotherTemp");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(temp, "#LOCAL#_temp");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        head.<SLLNode: SLLNode next> = temp;
/*5*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("head.<SLLNode: SLLNode next> = temp");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(anotherTemp, "#LOCAL#_anotherTemp");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(temp, "#LOCAL#_temp");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        head.<SLLNode: int data> = 4;
/*6*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("head.<SLLNode: int data> = 4");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(anotherTemp, "#LOCAL#_anotherTemp");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(temp, "#LOCAL#_temp");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        anotherTemp.<SLLNode: int data> = 5;
/*7*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("anotherTemp.<SLLNode: int data> = 5");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(anotherTemp, "#LOCAL#_anotherTemp");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(temp, "#LOCAL#_temp");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void dumpSpecToFile(java.lang.String)>("Test_Result");
        return;
/*8*/
    }

/*10*/
    public void exemple_1(int)
    {
        Test this;
        int num, temp;

        this := @this: Test;
/*11*/
        num := @parameter0: int;
/*11*/
        staticinvoke <Logger: void init(java.lang.String)>("exemple_1");
        temp = num;
/*11*/
/*11*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("temp = num");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(temp, "#LOCAL#_temp");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(num, "#LOCAL#_num");
        num = temp;
/*12*/
/*12*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("num = temp");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(temp, "#LOCAL#_temp");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(num, "#LOCAL#_num");
        num = num + 1;
/*13*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("num = num + 1");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(temp, "#LOCAL#_temp");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(num, "#LOCAL#_num");
        staticinvoke <Logger: void dumpSpecToFile(java.lang.String)>("Test_Result");
        return;
/*14*/
    }

/*16*/
    public static void main(java.lang.String[])
    {
        java.lang.String[] args;
        java.lang.Object test, head, temp, anotherTemp;
        Test tmp$1275143523, tmp;
        SLLNode tmp$1297189682, tmp$238816832, tmp$1934932165, tmp, tmp, tmp;

        args := @parameter0: java.lang.String[];
/*17*/
        tmp$1275143523 = new Test;
/*17*/
        specialinvoke tmp$1275143523.<Test: void <init>()>();
/*17*/
        test = tmp$1275143523;
/*17*/
        tmp = (Test) test;
        virtualinvoke tmp.<Test: void exemple_1(int)>(2);
/*18*/
        tmp$1297189682 = new SLLNode;
/*20*/
        specialinvoke tmp$1297189682.<SLLNode: void <init>(int,SLLNode)>(2, null);
/*20*/
        head = tmp$1297189682;
/*20*/
        tmp$238816832 = new SLLNode;
/*21*/
        specialinvoke tmp$238816832.<SLLNode: void <init>(int,SLLNode)>(1, null);
/*21*/
        temp = tmp$238816832;
/*21*/
        tmp$1934932165 = new SLLNode;
/*22*/
        specialinvoke tmp$1934932165.<SLLNode: void <init>(int,SLLNode)>(1, null);
/*22*/
        anotherTemp = tmp$1934932165;
/*22*/
        tmp = (Test) test;
        tmp = (SLLNode) head;
        tmp = (SLLNode) temp;
        tmp = (SLLNode) anotherTemp;
        virtualinvoke tmp.<Test: void exemple_2(SLLNode,SLLNode,SLLNode)>(tmp, tmp, tmp);
/*23*/
        return;
/*24*/
    }
}
