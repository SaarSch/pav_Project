public class Test extends java.lang.Object
{
/*Test.java*/

/*0*/
    public void <init>()
    {
        Test this;

        this := @this: Test;
/*1*/
        specialinvoke this.<java.lang.Object: void <init>()>();
/*1*/
        return;
/*1*/
    }

/*3*/
    public void simpleSLL(SLLNode, SLLNode, SLLNode)
    {
        Test this;
        SLLNode head, temp, anotherTemp;

        this := @this: Test;
/*4*/
        head := @parameter0: SLLNode;
/*4*/
        temp := @parameter1: SLLNode;
/*4*/
        anotherTemp := @parameter2: SLLNode;
/*4*/
        staticinvoke <Logger: void init(java.lang.String,boolean,boolean)>("simpleSLL", 1, 1);
        head.<SLLNode: int data> = 3;
/*4*/
        staticinvoke <Logger: void addToSpec(java.lang.String)>("[");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(temp, "#LOCAL#_temp");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(anotherTemp, "#LOCAL#_anotherTemp");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        staticinvoke <Logger: void logCmd(java.lang.String)>("head.<SLLNode: int data> = 3");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(temp, "#LOCAL#_temp");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(anotherTemp, "#LOCAL#_anotherTemp");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        head.<SLLNode: SLLNode next> = temp;
/*5*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("head.<SLLNode: SLLNode next> = temp");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(temp, "#LOCAL#_temp");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(anotherTemp, "#LOCAL#_anotherTemp");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        head.<SLLNode: int data> = 4;
/*6*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("head.<SLLNode: int data> = 4");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(temp, "#LOCAL#_temp");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(anotherTemp, "#LOCAL#_anotherTemp");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        anotherTemp.<SLLNode: int data> = 5;
/*7*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("anotherTemp.<SLLNode: int data> = 5");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(head, "#LOCAL#_head");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(temp, "#LOCAL#_temp");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>(anotherTemp, "#LOCAL#_anotherTemp");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        staticinvoke <Logger: void dumpSpecToFile(java.lang.String)>("Test_Result");
        return;
/*8*/
    }

/*10*/
    public void simpleNumericTest(int)
    {
        Test this;
        int num, temp;

        this := @this: Test;
/*11*/
        num := @parameter0: int;
/*11*/
        staticinvoke <Logger: void init(java.lang.String,boolean,boolean)>("simpleNumericTest", 1, 1);
        temp = num;
/*11*/
/*11*/
        staticinvoke <Logger: void addToSpec(java.lang.String)>("[");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(num, "#LOCAL#_num");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        staticinvoke <Logger: void logCmd(java.lang.String)>("temp = num");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(num, "#LOCAL#_num");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(temp, "#LOCAL#_temp");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        num = temp;
/*12*/
/*12*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("num = temp");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(num, "#LOCAL#_num");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(temp, "#LOCAL#_temp");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        num = num + 1;
/*13*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("num = num + 1");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(num, "#LOCAL#_num");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(temp, "#LOCAL#_temp");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        staticinvoke <Logger: void dumpSpecToFile(java.lang.String)>("Test_Result");
        return;
/*14*/
    }

/*16*/
    public void factorial(int)
    {
        Test this;
        int x, y;
        java.io.PrintStream $r0;

        this := @this: Test;
/*17*/
        x := @parameter0: int;
/*17*/
        staticinvoke <Logger: void init(java.lang.String,boolean,boolean)>("factorial", 1, 1);
        y = 1;
/*17*/
/*17*/
        staticinvoke <Logger: void addToSpec(java.lang.String)>("[");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(x, "#LOCAL#_x");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        staticinvoke <Logger: void logCmd(java.lang.String)>("y = 1");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(x, "#LOCAL#_x");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>($r0, "#LOCAL#_$r0");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(y, "#LOCAL#_y");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");

     label0:
        if x == 1 goto label1;
/*18*/

        staticinvoke <Logger: void logCmd(java.lang.String)>("if x == 1 goto $r0 = <java.lang.System: java.io.PrintStream out>");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(x, "#LOCAL#_x");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>($r0, "#LOCAL#_$r0");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(y, "#LOCAL#_y");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        y = y * x;
/*19*/
/*19*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("y = y * x");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(x, "#LOCAL#_x");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>($r0, "#LOCAL#_$r0");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(y, "#LOCAL#_y");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        x = x - 1;
/*20*/
/*20*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("x = x - 1");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(x, "#LOCAL#_x");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>($r0, "#LOCAL#_$r0");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(y, "#LOCAL#_y");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        goto label0;
/*20*/

        staticinvoke <Logger: void logCmd(java.lang.String)>("goto [?= (branch)]");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(x, "#LOCAL#_x");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>($r0, "#LOCAL#_$r0");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(y, "#LOCAL#_y");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");

     label1:
        $r0 = <java.lang.System: java.io.PrintStream out>;
/*22*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("$r0 = <java.lang.System: java.io.PrintStream out>");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(x, "#LOCAL#_x");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>($r0, "#LOCAL#_$r0");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(y, "#LOCAL#_y");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        virtualinvoke $r0.<java.io.PrintStream: void println(int)>(y);
/*22*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("virtualinvoke $r0.<java.io.PrintStream: void println(int)>(y)");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(x, "#LOCAL#_x");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>($r0, "#LOCAL#_$r0");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(y, "#LOCAL#_y");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        staticinvoke <Logger: void dumpSpecToFile(java.lang.String)>("Test_Result");
        return;
/*23*/
    }

/*25*/
    public void gcd(int, int)
    {
        Test this;
        int a, b;
        java.io.PrintStream $r0;

        this := @this: Test;
/*26*/
        a := @parameter0: int;
/*26*/
        b := @parameter1: int;
/*26*/

     label0:
        staticinvoke <Logger: void init(java.lang.String,boolean,boolean)>("gcd", 1, 1);
        if a == b goto label2;
/*26*/

        staticinvoke <Logger: void addToSpec(java.lang.String)>("[");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(a, "#LOCAL#_a");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(b, "#LOCAL#_b");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        staticinvoke <Logger: void logCmd(java.lang.String)>("if a == b goto $r0 = <java.lang.System: java.io.PrintStream out>");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(a, "#LOCAL#_a");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(b, "#LOCAL#_b");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>($r0, "#LOCAL#_$r0");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        if a <= b goto label1;
/*27*/

        staticinvoke <Logger: void logCmd(java.lang.String)>("if a <= b goto b = b - a");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(a, "#LOCAL#_a");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(b, "#LOCAL#_b");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>($r0, "#LOCAL#_$r0");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        a = a - b;
/*28*/
/*28*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("a = a - b");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(a, "#LOCAL#_a");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(b, "#LOCAL#_b");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>($r0, "#LOCAL#_$r0");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        goto label0;
/*28*/

        staticinvoke <Logger: void logCmd(java.lang.String)>("goto [?= (branch)]");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(a, "#LOCAL#_a");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(b, "#LOCAL#_b");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>($r0, "#LOCAL#_$r0");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");

     label1:
        b = b - a;
/*30*/
/*30*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("b = b - a");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(a, "#LOCAL#_a");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(b, "#LOCAL#_b");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>($r0, "#LOCAL#_$r0");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        goto label0;
/*30*/

        staticinvoke <Logger: void logCmd(java.lang.String)>("goto [?= (branch)]");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(a, "#LOCAL#_a");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(b, "#LOCAL#_b");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>($r0, "#LOCAL#_$r0");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");

     label2:
        $r0 = <java.lang.System: java.io.PrintStream out>;
/*32*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("$r0 = <java.lang.System: java.io.PrintStream out>");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(a, "#LOCAL#_a");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(b, "#LOCAL#_b");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>($r0, "#LOCAL#_$r0");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        virtualinvoke $r0.<java.io.PrintStream: void println(int)>(a);
/*32*/
        staticinvoke <Logger: void logCmd(java.lang.String)>("virtualinvoke $r0.<java.io.PrintStream: void println(int)>(a)");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" // [");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(a, "#LOCAL#_a");
        staticinvoke <Logger: void printLocal(int,java.lang.String)>(b, "#LOCAL#_b");
        staticinvoke <Logger: void printLocal(java.lang.Object,java.lang.String)>($r0, "#LOCAL#_$r0");
        staticinvoke <Logger: void addToSpec(java.lang.String)>(" ]");
        staticinvoke <Logger: void dumpSpecToFile(java.lang.String)>("Test_Result");
        return;
/*33*/
    }

/*46*/
    public static void main(java.lang.String[])
    {
        java.lang.String[] args;
        java.lang.Object test, head, temp, anotherTemp;
        Test tmp$1154821602, tmp;
        SLLNode tmp$945834881, tmp$1939022383, tmp$833474933, tmp, tmp, tmp;

        args := @parameter0: java.lang.String[];
/*47*/
        tmp$1154821602 = new Test;
/*47*/
        specialinvoke tmp$1154821602.<Test: void <init>()>();
/*47*/
        test = tmp$1154821602;
/*47*/
        tmp = (Test) test;
        virtualinvoke tmp.<Test: void simpleNumericTest(int)>(2);
/*50*/
        tmp = (Test) test;
        virtualinvoke tmp.<Test: void factorial(int)>(5);
/*51*/
        tmp = (Test) test;
        virtualinvoke tmp.<Test: void gcd(int,int)>(3, 54);
/*52*/
        tmp$945834881 = new SLLNode;
/*55*/
        specialinvoke tmp$945834881.<SLLNode: void <init>(int,SLLNode)>(2, null);
/*55*/
        head = tmp$945834881;
/*55*/
        tmp$1939022383 = new SLLNode;
/*56*/
        specialinvoke tmp$1939022383.<SLLNode: void <init>(int,SLLNode)>(1, null);
/*56*/
        temp = tmp$1939022383;
/*56*/
        tmp$833474933 = new SLLNode;
/*57*/
        specialinvoke tmp$833474933.<SLLNode: void <init>(int,SLLNode)>(1, null);
/*57*/
        anotherTemp = tmp$833474933;
/*57*/
        tmp = (Test) test;
        tmp = (SLLNode) head;
        tmp = (SLLNode) temp;
        tmp = (SLLNode) anotherTemp;
        virtualinvoke tmp.<Test: void simpleSLL(SLLNode,SLLNode,SLLNode)>(tmp, tmp, tmp);
/*58*/
        return;
/*60*/
    }
}
